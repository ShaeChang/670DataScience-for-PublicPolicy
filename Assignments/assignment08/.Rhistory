library(topicmodels)
library(igraph)
library(ggraph)
library(tidymodels)
library(textrecipes)
library(vip)
library(stopwords)
library(janitor)
library(patchwork)
library(factoextra)
library(gganimate)
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(SnowballC)
library(topicmodels)
library(igraph)
library(ggraph)
library(tidymodels)
library(textrecipes)
library(vip)
library(stopwords)
library(janitor)
library(patchwork)
library(factoextra)
library(gganimate)
#creating the function
clusterfun <- function(x,y){
votes_pca <- prcomp(y)%>%
.$x %>%
as_tibble()
votes_cluster <- kmeans(y, centers = x, nstart = 100)
votes_combined <-bind_cols(y, votes_pca, cluster=votes_cluster$cluster)%>%
mutate(cluster=factor(cluster))
ggplot(data=votes_combined, aes(PC1,PC2,color=cluster))+
geom_point()+
ggtitle(paste0("K-Means with K=", x, " and PCA"))
}
#within sum of squares and silhouette distance suggest 2 clusters, while gap statistic suggests 4
plot1 <- clusterfun(2,votes_numeric)
plot2 <- clusterfun(4,votes_numeric)
plot1+plot2
?map2
set.seed(20220413)
votes <- read_csv("executive-orders.csv")
map_votes <- map2(.x = 103:114, .y = votes, .f = stretch_fun)
votes <- read_csv("executive-orders.csv")
stretch_fun <- function(x){
#filter the votes data
sess <- votes %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
set.seed(20220413)
map_votes <- map(.x = 103:114, .f = stretch_fun)
stretch_fun(103)
votes <- read_csv("executive-orders.csv")
stretch_fun <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103, votes)
votes <- read_csv("executive-orders.csv")
stretch_fun <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103, votes)
votes <- read_csv("executive-orders.csv")
stretch_fun <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103, votes)
votes <- read_csv("executive-orders.csv")
stretch_fun <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103, votes)
stretch_fun_test <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
print(sess)
}
stretch_fun_test(103, votes)
View(votes)
View(vote)
vote <- read_csv("votes_time_series.csv")
stretch_fun <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103, votes)
View(vote)
vote <- read_csv("votes_time_series.csv")
stretch_fun <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103, votes)
stretch_fun(103, vote)
set.seed(20220413)
map_votes <- map(.x = 103:114, .y = vote, .f = stretch_fun)
set.seed(20220413)
map_votes <- map(.x = 103:114, .y = vote, .f = stretch_fun)
vote <- read_csv("votes_time_series.csv")
stretch_fun <- function(x){
#filter the votes data
sess <- vote %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
print(sess_combine_2)
}
stretch_fun(103)
set.seed(20220413)
map_votes <- map(.x = 103:114, .f = stretch_fun)
#don't know how to write
stretch_fun_test <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
print(sess)
}
stretch_fun_test(103, vote)
rm(stretch_fun_test())
stretch_fun_test <- function(x,y){
#filter the votes data
sess <- y %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
print(sess)
}
stretch_fun_test(103, vote)
rm(stretch_fun_test)
vote_113 <- vote %>%
filter(session == 113) %>%
select(starts_with("v"))
vote_113
vote_113 <- vote %>%
filter(session == 113) %>%
select(starts_with("v"))
set.seed(20220414)
fviz_nbclust(votes_numeric,
FUN = hcut,
k.max = 10,
method = "wss",
hc_func = "hclust",
hc_method = "ward.D2",
hc_metric = "euclidean")
set.seed(20220414)
fviz_nbclust(votes_numeric,
FUN = hcut,
k.max = 10,
method = "silhouette",
hc_func = "hclust",
hc_method = "ward.D2",
hc_metric = "euclidean")
vote_113 <- vote %>%
filter(session == 113) %>%
select(starts_with("v"))
set.seed(20220414)
fviz_nbclust(votes_113,
FUN = hcut,
k.max = 10,
method = "wss",
hc_func = "hclust",
hc_method = "ward.D2",
hc_metric = "euclidean")
vote_113 <- vote %>%
filter(session == 113) %>%
select(starts_with("v"))
set.seed(20220414)
fviz_nbclust(vote_113,
FUN = hcut,
k.max = 10,
method = "wss",
hc_func = "hclust",
hc_method = "ward.D2",
hc_metric = "euclidean")
set.seed(20220414)
fviz_nbclust(vote_113,
FUN = hcut,
k.max = 10,
method = "silhouette",
hc_func = "hclust",
hc_method = "ward.D2",
hc_metric = "euclidean")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(SnowballC)
library(topicmodels)
library(igraph)
library(ggraph)
library(tidymodels)
library(textrecipes)
library(vip)
library(stopwords)
library(janitor)
library(patchwork)
library(factoextra)
library(gganimate)
library(stats)
?hclust
hclust_euc <- vote_113 %>%
scale() %>%
dist(method = "euclidean") %>%
hclust(method = "ward.D2")
plot(hc1, cex = 0.6, hang = -1)
hclust_euc <- vote_113 %>%
scale() %>%
dist(method = "euclidean") %>%
hclust(method = "ward.D2")
plot(hclust_euc, cex = 0.6, hang = -1)
hclust_euc <- vote_113 %>%
scale() %>%
dist(method = "euclidean") %>%
hclust(method = "ward.D2")
plot(hclust_euc, cex = 0.6, hang = -1)
vote_113_assign <- cutree(hclust_euc, k = 4)
vote_113_assign
hclust_euc <- vote_113 %>%
scale() %>%
dist(method = "euclidean") %>%
hclust(method = "ward.D2")
plot(hclust_euc, cex = 0.6, hang = -1)
vote_113_assign <- cutree(hclust_euc, k = 4)
vote_113_d <- bind_cols(vote_113, vote_113_assign)
vote_113_d
vote_113_assign <- cutree(hclust_euc, k = 4)
vote_113_d <- bind_cols(vote_113, vote_113_assign)
#this is the final data frame generated
vote_113_d
hclust_euc <- vote_113 %>%
scale() %>%
dist(method = "euclidean") %>%
hclust(method = "ward.D2")
plot(hclust_euc, cex = 0.6, hang = -1)
rect.hclust(hclust_euc, k = 4, border = 2:5)
vote_113_assign <- cutree(hclust_euc, k = 4)
vote_113_d <- bind_cols(vote_113, vote_113_assign)
#this is the final data frame generated
vote_113_d
set.seed(20220413)
map_votes <- map(103:114, stretch_fun)
#don't know how to write
set.seed(20220413)
map_votes <- map(103:114, stretch_fun) %>%
.$x
#don't know how to write
set.seed(20220413)
map_votes <- map(103:114, stretch_fun) %>%
.$x %>%
as_tibble()
#don't know how to write
View(map_votes)
set.seed(20220413)
map_votes <- map_df(103:114, stretch_fun)
#don't know how to write
vector <- c(103:114)
set.seed(20220413)
map_votes <- map_df(vector, stretch_fun)
#don't know how to write
vote <- read_csv("votes_time_series.csv")
stretch_fun <- function(x){
#filter the votes data
sess <- vote %>%
replace(., is.na(.), 0) %>%
filter(session == x) %>%
select(starts_with("v"))
#run PCA
sess_pca <- prcomp(sess) %>%
.$x %>%
as_tibble() %>%
select("PC1", "PC2")
sess_combine_1 <- bind_cols(sess, sess_pca)
#conduct kmeans cluster analysis
sess_clus <- kmeans(sess, centers = 4, nstart = 100)
sess_combine_2 <- bind_cols(sess_combine_1, cluster = sess_clus$cluster)
return(sess_combine_2)
}
vector <- c(103:114)
set.seed(20220413)
map_votes <- map_df(vector, stretch_fun)
#don't know how to write
vector <- c(103:114)
set.seed(20220413)
map_votes <- map_df(vector, stretch_fun)
map_votes
#don't know how to write
set.seed(20220413)
map_votes <- map_df(103:114, stretch_fun)
map_votes
#don't know how to write
vote_original <- vote %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
vote_pc <- vote_original %>%
select(starts_with("v")) %>%
prcomp() %>%
.$x %>%
as_tibble() %>%
select(PC1, PC2)
vote_df <- bind_cols(vote_original, vote_pc)
vote_original <- vote %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
vote_pc <- vote_original %>%
select(starts_with("v")) %>%
prcomp() %>%
.$x %>%
as_tibble() %>%
select(PC1, PC2)
vote_df <- bind_cols(vote_original, vote_pc)
clus_plot <- vote_df %>%
ggplot(mapping = aes(x = PC1, y = PC2, color = state)) +
geom_point()+
transition_time(session) +
labs(title = 'Session: {frame_time}', x = 'PC1', y = 'PC2') +
ease_aes('linear')
vote_original <- vote %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
vote_pc <- vote_original %>%
select(starts_with("v")) %>%
prcomp() %>%
.$x %>%
as_tibble() %>%
select(PC1, PC2)
vote_df <- bind_cols(vote_original, vote_pc)
clus_plot <- vote_df %>%
ggplot(mapping = aes(x = PC1, y = PC2, color = state)) +
geom_point()+
transition_time(session) +
labs(title = 'Session: {frame_time}', x = 'PC1', y = 'PC2') +
ease_aes('linear')
clus_plot
vote_original <- vote %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
vote_pc <- vote_original %>%
select(starts_with("v")) %>%
prcomp() %>%
.$x %>%
as_tibble() %>%
select(PC1, PC2)
vote_df <- bind_cols(vote_original, vote_pc)
clus_plot <- vote_df %>%
ggplot(mapping = aes(x = PC1, y = PC2, color = state)) +
geom_point()+
transition_time(session) +
labs(title = 'Session: {frame_time}', x = 'PC1', y = 'PC2') +
ease_aes('linear')
animate(clus_plot, duration = 10, fps = 20, width = 400, height = 400, renderer = gifski_renderer()) anim_save("clust_gif.gif")
vote_original <- vote %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
vote_pc <- vote_original %>%
select(starts_with("v")) %>%
prcomp() %>%
.$x %>%
as_tibble() %>%
select(PC1, PC2)
vote_df <- bind_cols(vote_original, vote_pc)
clus_plot <- vote_df %>%
ggplot(mapping = aes(x = PC1, y = PC2, color = state)) +
geom_point()+
transition_time(session) +
labs(title = 'Session: {frame_time}', x = 'PC1', y = 'PC2') +
ease_aes('linear')
animate(clus_plot, duration = 10, fps = 20, width = 400, height = 400, renderer = gifski_renderer())
install.packages("gifski")
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(SnowballC)
library(topicmodels)
library(igraph)
library(ggraph)
library(tidymodels)
library(textrecipes)
library(vip)
library(stopwords)
library(janitor)
library(patchwork)
library(factoextra)
library(gganimate)
library(stats)
library(gifski)
vote_original <- vote %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
vote_pc <- vote_original %>%
select(starts_with("v")) %>%
prcomp() %>%
.$x %>%
as_tibble() %>%
select(PC1, PC2)
vote_df <- bind_cols(vote_original, vote_pc)
clus_plot <- vote_df %>%
ggplot(mapping = aes(x = PC1, y = PC2, color = state)) +
geom_point()+
transition_time(session) +
labs(title = 'Session: {frame_time}', x = 'PC1', y = 'PC2') +
ease_aes('linear')
animate(clus_plot, duration = 10, fps = 20, width = 400, height = 400, renderer = gifski_renderer())
anim_save("clust_gif.gif")
