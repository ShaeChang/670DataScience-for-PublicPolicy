ungroup()
# subset the data
sampled_df <- sampled_df %>%
select(camis, boro, zipcode, cuisine_description, inspection_date,
action, violation_code, violation_description, grade,
inspection_type, latitude, longitude, council_district,
census_tract, inspection_year, critical_flag) %>%
filter(complete.cases(.)) %>%
filter(inspection_year >= 2017) %>%
filter(grade %in% c("A", "B", "C"))
# create the binary target variable
sampled_df <- sampled_df %>%
mutate(grade = if_else(grade == "A", "A", "Not A")) %>%
mutate(grade = as.factor(grade))
# create extra predictors
sampled_df <- sampled_df %>%
group_by(boro, zipcode, cuisine_description, inspection_date,
action, violation_code, violation_description, grade,
inspection_type, latitude, longitude, council_district,
census_tract, inspection_year)  %>%
mutate(vermin = str_detect(violation_description, pattern = "mice|rats|vermin|roaches")) %>%
summarize(violations = n(),
vermin_types = sum(vermin),
critical_flags = sum(critical_flag == "Y")) %>%
ungroup()
# write the data
write_csv(sampled_df, "restaurant_grades.csv")
set.seed(20201020)
df_split <- initial_split(data=sampled_df,prop=0.8)
df_train <- training(df_split)
df_test <- testing(df_split)
cart_rec <- recipe(formula = grade ~ ., data = df_train)%>%
themis::step_downsample(grade)
cart_mod <-
decision_tree()%>%
set_engine(engine = "rpart")%>%
set_mode(mode = "classification")
cart_wf <- workflow() %>%
add_recipe(cart_rec) %>%
add_model(cart_mod)
cart_fit <- cart_wf %>%
fit(data = df_train)
rpart.plot::rpart.plot(x = cart_fit$fit$fit$fit)
predictions <- bind_cols(
df_test,
predict(object = cart_fit, new_data = df_test),
predict(object = cart_fit, new_data = df_test, type = "prob")
)
conf_mat(data = predictions, truth = grade, estimate = .pred_class)
precision(data = predictions, truth = grade, estimate = .pred_class)
recall(data = predictions, truth = grade, estimate = .pred_class)
predictions <- bind_cols(
df_test,
predict(object = cart_fit, new_data = df_test),
predict(object = cart_fit, new_data = df_test, type = "prob")
)
conf_mat(data = predictions, truth = grade, estimate = .pred_class)
metric_1 <- rbind(
precision(data = predictions, truth = grade, estimate = .pred_class),
recall(data = predictions, truth = grade, estimate = .pred_class)
#put metric in one form
)
metric_1
cart_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 10)
#convert date into useable variable
Chicago$weekday <- wday(Chicago$date, label = T)
Chicago$month <- month(Chicago$date, label = T)
Chicago$yearday <- yday(Chicago$date)
Chicago_modeling <- Chicago %>%
slice(1:5678)
Chicago_implementation <- Chicago %>%
slice(5679:5698) %>%
select(-ridership)
#set up a testing environment
set.seed(20211101)
chicago_split <- initial_split(data = Chicago_modeling)
chicago_train <- training(x = chicago_split)
chicago_test <- testing(x = chicago_split)
#exploratory data analysis
p1 <- ggplot(chicago_train, aes(x = weekday, y = ridership, fill = weekday)) +
geom_violin() +
labs(title = "Ridership by weekday") +
theme_minimal()
p2 <- ggplot(chicago_train, aes(x = month, y = ridership, fill = month)) +
geom_bar(stat="identity") +
labs(title = "Ridership by month") +
theme_minimal()
p3 <- ggplot(chicago_train, aes(x = yearday, y = ridership, fill = yearday)) +
geom_bar(stat = "identity") +
labs(title = "Ridership by year") +
theme_minimal()
library(patchwork)
(p1 | p2)/
p3
#exploratory data analysis
p1 <- ggplot(chicago_train, aes(x = weekday, y = ridership, fill = weekday)) +
geom_violin() +
labs(title = "Ridership by weekday") +
theme_minimal()
p2 <- ggplot(chicago_train, aes(x = month, y = ridership, fill = month)) +
geom_bar(stat="identity") +
labs(title = "Ridership by month") +
theme_minimal()
p3 <- ggplot(chicago_train, aes(x = yearday, y = ridership, fill = y(date))) +
geom_bar(stat = "identity") +
labs(title = "Ridership by year") +
theme_minimal()
library(patchwork)
(p1 | p2)/
p3
#exploratory data analysis
p1 <- ggplot(chicago_train, aes(x = weekday, y = ridership, fill = weekday)) +
geom_violin() +
labs(title = "Ridership by weekday") +
theme_minimal()
p2 <- ggplot(chicago_train, aes(x = month, y = ridership, fill = month)) +
geom_bar(stat="identity") +
labs(title = "Ridership by month") +
theme_minimal()
p3 <- ggplot(chicago_train, aes(x = year(date), y = ridership, fill = year(date))) +
geom_bar(stat = "identity") +
labs(title = "Ridership by year") +
theme_minimal()
library(patchwork)
(p1 | p2)/
p3
count(chicago_train, yearday)
folds <- vfold_cv(data = chicago_train, v = 10)
chicago_rec <- recipe(formula = ridership ~ ., data= chicago_train) %>%
step_holiday(date, keep_original_cols = FALSE) %>%
step_scale(all_numeric_predictors()) %>%
step_center(all_numeric_predictors()) %>%
step_unorder(month, weekday) %>%
step_dummy(month, weekday)
lasso_grid <- grid_regular(penalty(), levels = 10)
lasso_mod <- linear_reg(penalty = tune(), mixture = 1 ) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(lasso_mod)
lasso_cv <- lasso_wf %>%
tune_grid(
resamples = folds,
grid = lasso_grid
)
lasso_best <- lasso_cv %>%
select_best(metric = "rmse")
lasso_final <- finalize_workflow(
lasso_wf,
parameters = lasso_best
)
lasso_fit_rs <-
lasso_final %>%
fit_resamples(resamples = folds,
metric = metric_set(mae, rmse))
collect_metrics(lasso_fit_rs)
collect_metrics(lasso_fit_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
rforest_mod <- rand_forest(mode = "regression",engine = "ranger")
rforest_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(rforest_mod)
rforest_rs <-
rforest_wf %>%
fit_resamples(resamples = folds,
metrics = metric_set(rmse, mae))
collect_metrics(rforest_rs)
collect_metrics(rforest_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
knn_mod <-nearest_neighbor(neighbors = 5) %>%
set_engine(engine = "kknn") %>%
set_mode(mode = "regression")
knn_wf <-workflow() %>%
add_recipe(chicago_rec) %>%
add_model(knn_mod)
knn_rs <-
knn_wf %>%
fit_resamples(resamples = folds,
metrics = metric_set(mae, rmse))
collect_metrics(knn_rs)
collect_metrics(knn_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
bind_rows(
`lasso` = show_best(lasso_fit_rs, metric = "rmse", n = 1),
`random forest` = show_best(rforest_rs, metric = "rmse", n = 1),
`knn` = show_best(knn_rs, metric = "rmse",n = 1),
.id = "model"
)
#Estimate the out-of-sample error rate
#since the rmse of lasso model is the lowest one, so we use our lasso_final to fit the testing data.
lasso_fit <- lasso_final %>%
fit(data = chicago_train)
predictions <-
bind_cols(chicago_test,
predict(object = lasso_fit,
new_data = chicago_test))
rmse(data = predictions, truth = ridership, estimate = .pred)
#implement the final model
predictions_implement <-
bind_cols(Chicago_implementation,
predict(object = lasso_fit,
new_data = Chicago_implementation))
print(predictions_implement$.pred)
lasso_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 10)
lasso_grid <- grid_regular(penalty(), levels = 10)
lasso_mod <- linear_reg(penalty = tune(), mixture = 1 ) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(lasso_mod)
lasso_cv <- lasso_wf %>%
tune_grid(
resamples = folds,
grid = lasso_grid
)
lasso_best <- lasso_cv %>%
select_best(metric = "rmse")
lasso_final <- finalize_workflow(
lasso_wf,
parameters = lasso_best
)
lasso_fit_rs <-
lasso_final %>%
fit_resamples(resamples = folds,
metric = metric_set(mae, rmse))
collect_metrics(lasso_fit_rs)
collect_metrics(lasso_fit_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
#For mae, we couldn't get mae by the code above, so we extract it manually:
ctrl <- control_resamples(save_pred = TRUE)
lasso_fit_rsmae <-
lasso_final %>%
fit_resamples(resamples = folds,
control = ctrl)
lasso_pred <- collect_predictions(lasso_fit_rsmae)
mae <- rbind(
mae(filter(lasso_pred, id == "Fold01"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold02"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold03"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold04"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold05"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold06"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold07"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold08"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold09"), truth = Clark_Lake, estimate = .pred),
mae(filter(lasso_pred, id == "Fold10"), truth = Clark_Lake, estimate = .pred)
)
lasso_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 30)
lasso_grid <- grid_regular(penalty(), levels = 10)
lasso_mod <- linear_reg(penalty = tune(), mixture = 1 ) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(lasso_mod)
lasso_cv <- lasso_wf %>%
tune_grid(
resamples = folds,
grid = lasso_grid
)
lasso_best <- lasso_cv %>%
select_best(metric = "rmse")
lasso_final <- finalize_workflow(
lasso_wf,
parameters = lasso_best
)
lasso_fit_rs <-
lasso_final %>%
fit_resamples(resamples = folds,
metric = metric_set(mae, rmse))
collect_metrics(lasso_fit_rs)
collect_metrics(lasso_fit_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
#For mae, we couldn't get mae by the code above, so we extract it manually:
ctrl <- control_resamples(save_pred = TRUE)
lasso_fit_rsmae <-
lasso_final %>%
fit_resamples(resamples = folds,
control = ctrl)
lasso_pred <- collect_predictions(lasso_fit_rsmae)
mae <- rbind(
mae(filter(lasso_pred, id == "Fold01"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold02"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold03"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold04"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold05"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold06"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold07"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold08"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold09"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold10"), truth = ridership, estimate = .pred)
)
mae
#These are maes for each folds
lasso_grid <- grid_regular(penalty(), levels = 10)
lasso_mod <- linear_reg(penalty = tune(), mixture = 1 ) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(lasso_mod)
lasso_cv <- lasso_wf %>%
tune_grid(
resamples = folds,
grid = lasso_grid
)
lasso_best <- lasso_cv %>%
select_best(metric = "rmse")
lasso_final <- finalize_workflow(
lasso_wf,
parameters = lasso_best
)
lasso_fit_rs <-
lasso_final %>%
fit_resamples(resamples = folds,
metric = metric_set(rmse, mae))
collect_metrics(lasso_fit_rs)
collect_metrics(lasso_fit_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
#For mae, we couldn't get mae by the code above, so we extract it manually:
ctrl <- control_resamples(save_pred = TRUE)
lasso_fit_rsmae <-
lasso_final %>%
fit_resamples(resamples = folds,
control = ctrl)
lasso_pred <- collect_predictions(lasso_fit_rsmae)
mae <- rbind(
mae(filter(lasso_pred, id == "Fold01"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold02"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold03"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold04"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold05"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold06"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold07"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold08"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold09"), truth = ridership, estimate = .pred),
mae(filter(lasso_pred, id == "Fold10"), truth = ridership, estimate = .pred)
)
mae
#These are maes for each folds
library(tidyverse)
library(tidymodels)
library(lubridate)
library(themis)
library(vip)
library(glmnet)
library(ranger)
library(kknn)
library(yardstick)
library(tune)
library(workflows)
library(recipes)
library(parsnip)
library(rsample)
lasso_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 53)
lasso_fit <- lasso_final %>%
fit(data = chicago_train)
predictions <-
bind_cols(chicago_test,
predict(object = lasso_fit,
new_data = chicago_test))
rmse(data = predictions, truth = ridership, estimate = .pred)
lasso_fit <- lasso_final %>%
fit(data = chicago_train)
predictions <-
bind_cols(chicago_test,
predict(object = lasso_fit,
new_data = chicago_test))
rmse(data = predictions, truth = ridership, estimate = .pred)
summary(predictions$ridership)
rforest_mod <- rand_forest(mode = "regression",engine = "ranger")
rforest_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(rforest_mod)
rforest_rs <-
rforest_wf %>%
fit_resamples(resamples = folds)
collect_metrics(rforest_rs)
collect_metrics(rforest_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
#Calculate mae
lasso_fit_rsmae <-
lasso_final %>%
fit_resamples(resamples = folds,
control = ctrl)
rforest_rsmae <-
rforest_wf %>%
fit_resamples(resamples = folds，
rforest_mod <- rand_forest(mode = "regression",engine = "ranger")
rforest_wf <- workflow() %>%
add_recipe(chicago_rec) %>%
add_model(rforest_mod)
rforest_rs <-
rforest_wf %>%
fit_resamples(resamples = folds)
collect_metrics(rforest_rs)
collect_metrics(rforest_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
#Calculate mae
lasso_fit_rsmae <-
lasso_final %>%
fit_resamples(resamples = folds,
control = ctrl)
rforest_rsmae <-
rforest_wf %>%
fit_resamples(resamples = folds,
control = ctrl)
rforest_pred <- collect_predictions(rforest_rsmae)
mae2 <- rbind(
mae(filter(rforest_pred, id == "Fold01"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold02"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold03"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold04"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold05"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold06"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold07"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold08"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold09"), truth = ridership, estimate = .pred),
mae(filter(rforest_pred, id == "Fold10"), truth = ridership, estimate = .pred)
)
mae2
knn_mod <-nearest_neighbor(neighbors = 5) %>%
set_engine(engine = "kknn") %>%
set_mode(mode = "regression")
knn_wf <-workflow() %>%
add_recipe(chicago_rec) %>%
add_model(knn_mod)
knn_rs <-
knn_wf %>%
fit_resamples(resamples = folds)
collect_metrics(knn_rs)
collect_metrics(knn_rs, summarize = FALSE) %>%
filter(.metric == "rmse") %>%
ggplot(aes(id, .estimate, group = .estimator)) +
geom_line() +
geom_point() +
scale_y_continuous(limits = c(0, 3)) +
labs(title = "Calculated RMSE Across the 10 Folds", y = "RMSE_hat") +
theme_minimal()
#Calculate mae
knn_rsmae <-
knn_wf %>%
fit_resamples(resamples = folds,
control = ctrl)
knn_pred <- collect_predictions(knn_rsmae)
mae3 <- rbind(
mae(filter(knn_pred, id == "Fold01"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold02"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold03"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold04"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold05"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold06"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold07"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold08"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold09"), truth = ridership, estimate = .pred),
mae(filter(knn_pred, id == "Fold10"), truth = ridership, estimate = .pred)
)
mae3
