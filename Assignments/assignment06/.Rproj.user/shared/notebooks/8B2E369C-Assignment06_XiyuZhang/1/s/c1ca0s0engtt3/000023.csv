"0",""
"0","#write a new function calculating the gini index for splits in a decision tree model for multi-class classification."
"0","calc_gini_k <- function(left, right) {"
"0","  "
"0","  #calculate gini index for each split"
"0","   #1. left"
"0","  left_prep <- prop.table(table(left)) %>% #an intermediate variable help calculate gini_left"
"0","  as_tibble() %>%"
"0","  pull()"
"0","  gini_left <- 1 - sum((left_prep)^2)"
"0","    #2. right"
"0","  right_prep<- prop.table(table(right)) %>% #an intermediate variable help calculate gini_right"
"0","  as_tibble() %>%"
"0","  pull()"
"0","  gini_right <- 1 - sum((right_prep)^2)"
"0","  "
"0","  #calculate the overall gini index"
"0","    #1. define S"
"0","  S <- length(left) + length(right)"
"0","    #2. calculate the gini_combined"
"0","  gini_combined <- ((length(left)/S)*gini_left) + ((length(right)/S)*gini_right)"
"0","  "
"0","  # return"
"0","  return("
"0","    list("
"0","      gini_left = gini_left,"
"0","      gini_right = gini_right,"
"0","      gini_combined = gini_combined"
"0","    )"
"0","  )"
"0","  "
"0","}"
"0",""
"0","#test the function"
"0","calc_gini_k(left = c(0, 0, 0), right = c(1, 1, 1))"
"1","$gini_left
"
"1","[1]"
"1"," 0"
"1","
"
"1","
"
"1","$gini_right
"
"1","[1]"
"1"," 0"
"1","
"
"1","
"
"1","$gini_combined
"
"1","[1]"
"1"," 0"
"1","
"
"1","
"
"0","calc_gini_k(left = c(0, 0, 1, 1), right = c(0, 0, 1, 1))"
"1","$gini_left
"
"1","[1]"
"1"," 0.5"
"1","
"
"1","
"
"1","$gini_right
"
"1","[1]"
"1"," 0.5"
"1","
"
"1","
"
"1","$gini_combined
"
"1","[1]"
"1"," 0.5"
"1","
"
"1","
"
"0","calc_gini_k(left = dt_analysis$rat_burrow[1:5], right = dt_analysis$rat_burrow[6:10])"
"1","$gini_left
"
"1","[1]"
"1"," 0.48"
"1","
"
"1","
"
"1","$gini_right
"
"1","[1]"
"1"," 0"
"1","
"
"1","
"
"1","$gini_combined
"
"1","[1]"
"1"," 0.24"
"1","
"
"1","
"
"0","#generate the data set"
"0","set.seed(20220318)"
"0","data <- tibble("
"0","  x1 = runif(100, min = 0, max = 1),"
"0","  x2 = runif(100, min = 0, max = 1),"
"0","  x1_prob = runif(100, min = 0, max = 1),"
"0","  x2_prob = runif(100, min = 0, max = 1)"
"0",") %>%"
"0","  mutate("
"0","    y = case_when("
"0","    x1_prob > x1 & x2_prob > x2 ~ ""a"","
"0","    x1_prob < x1 & x2_prob > x2 ~ ""b"","
"0","    x1_prob > x1 & x2_prob < x2 ~ ""c"","
"0","    x1_prob < x1 & x2_prob < x2 ~ ""d"","
"0","    )"
"0",") %>%"
"0","  mutate(y = factor(y)) %>%"
"0","  select(x1, y)"
"0",""
"0","#Evaluate all of the non-empty splits to decide the node"
"0","  #1. the vector of all gini_combined for each node"
"0","gini_combined <- map_dbl("
"0","  .x = 1:99,"
"0","  .f = ~calc_gini_k("
"0","    left = data$y[1:.x],"
"0","    right = data$y[(.x + 1):100]"
"0","  )$gini_combined"
"0",") %>%"
"0","  glimpse()"
"1"," num [1:99] "
"1",""
"1","0.735 0.738 0.741 0.739 0.735"
"1",""
"1"," ..."
"1",""
"1","
"
"0","#this it the vector of all gini_combined for each node."
"0","  #2. to find the minimum gini_combined and the corresponding order of it"
"0","gini_combined %>%"
"0","  as_tibble() %>%"
"0","  mutate(order = 1:99) %>%"
"0","  arrange(value) %>%"
"0","  glimpse()"
"1","Rows: 99"
"1",""
"1","
"
"1","Columns: 2"
"1",""
"1","
"
"1","$ value [3m[38;5;246m<dbl>[39m[23m 0.7206537, 0.7240152, 0.7256587, 0.7259136, 0.7260000, 0.7279592, 0.7281250, 0.â€¦
$ order [3m[38;5;246m<int>[39m[23m 11, 12, 13, 14, 10, 98, 96, 8, 6, 95, 9, 15, 89, 87, 45, 7, 90, 92, 97, 86, 18,â€¦"
"1",""
"1","
"
"0","#find the corresponding predictor for our best split node"
"0","data$x1[11]"
"1","[1]"
"1"," 0.5276528"
"1","
"
"0","#So, the optimal choice of the split node is to split the data set after x1 = 0.5276528, the 11th observation we have."
