# Name: Xiyu Zhang
# GUID: 837779188
# Exercise 01
a <- 4 #1 Assign the number 4 to a.
b <- 5 #2 Assign the number 5 to b.
c <- a * b #3 Multiply a and b and assign the result to c
c #4 include c to print the result of calculation
# Exercise 02
ex2_vector <- c(1, NA, 20, 45) #1 Assign the vector c(1, NA, 20, 45) to ex2_vector
mean(x = ex2_vector) #2 Use the mean function on ex2_vector
# the answer is NA. Because NA is a contagious value in R that will override all calculations.
?mean #3 Submit ?mean in the console to read the documentation for mean(). I also wrote it down here.
mean(x = ex2_vector, na.rm = TRUE) #4 calculate the mean with the argument that ignores missing values
# Exercise 03
integer_sequence <- 1432:-546 #1 Assign a sequence of integers from 1,432 to -546 to integer_sequence
integer_sequence * 2 #2 Multiply every element of integer_sequence by 2
sqrt( integer_sequence ^ 2 ) #3 square every element of integer_sequence and then take the square root of every element that results from that operation
# Exercise 04
ex4_vector <- 1:100 #1 Create a vector of integers from 1 to 100 and assign it ex4_vector
favorite_number <- 45 #2 Pick favorite integer 45, and assign it to favorite_number
sum( ex4_vector == favorite_number ) #3 Calculate the number of elements in ex4_vector that are a)Equal to favorite_number
sum( ex4_vector > favorite_number ) #3 b)Greater than favorite_number
sum( ex4_vector >= favorite_number ) #3 c)Greater than or equal to favorite_number
sum( ex4_vector < favorite_number ) #3 d)Less than favorite_number
sum( ex4_vector <= favorite_number ) #3 e)Less than or equal to favorite_number
favorite_numbers <- c(10, 45, 46) #4 Pick three favorite integers from 1 to 100 and assign them to a vector called favorite_numbers
sum( ex4_vector %in% favorite_numbers ) #5 Calculate the number of elements in ex4_vector that are in favorite_numbers using %in%.
# Exercise 05
#1 Copy the following code to your .R and run it
universities <- c("Georgetown University",
"American University",
"George Washington University",
NA)
set.seed(20200112)
universities_sample <- sample(x = universities, size = 10000, replace = TRUE)
#2 Use is.na() to return a vector of Booleans where TRUE indicates an element in universities_sample is NA and false if where an element is not NA.
is.na( universities_sample )
table( is.na(universities_sample) ) #3 wrap the code from step 2. in sum() or table() to count the number of missing values
mean( is.na(universities_sample) ) #4 wrap the code from step 2. in mean() to count the proportion of values that are missing.
# Exercise 06
sum(rivers) #1 the total length of major rivers in North America
mean(rivers) #2 the average length of major rivers in North America
median(rivers) #3  the median major river length in North America
var(rivers) #4 the variance of major river lengths in North America
sd(rivers) #5 the standard deviation of major river lengths in North America.
min(rivers) #6 the minimum major river length in North America.
length(rivers) #7 the length of the rivers vector.
quantile(rivers, probs = 0.25 ) #8 the 25th percentile river length.
quantile(rivers, probs = c(0.1, 0.2, 0.3)) #9 the 10th, 20th, and 30th percentile river lengths in one function call.
summary(rivers) #10 the six-number summary of rivers
# Exercise 07
character_vector <- c("1", "2", "3", "4", "5")
numeric_vector <- c(1, 2, 3, 4, 5)
#2 Convert character_vector to a numeric vector with as.numeric() and test the equivalence of each element to numeric_vector using the %in% operator.
as.numeric(character_vector) %in% numeric_vector
#3 Convert numeric_vector to a character vector with as.character() and test the equivalence of each element to character_vector using the %in% operator
as.character(numeric_vector) %in% character_vector
#4 comparing character_vector and numeric_vector without converting the types
character_vector == numeric_vector
#the result is also five TRUEs, which is surprising. It seems like whether it is a charactor vector or a numeric vector does not change the result.
# Exercise 08
#1 Create a vector of the decimals 0.44, 0.45, and 0.46 using c() or seq() and assign it to decimals
decimals <- c(0.44, 0.45, 0.46)
#2 I would round these three numbers to 0.4, 0.5, 0.5
#3 Wrap decimals in the round() function and include the argument digits = 1
round(decimals, digits = 1)
#3 I expected the answer 0.4, 0.5, 0.5, however, it turns out to be 0.4, 0.4, 0.5.
# Exercise 09
#1 Install the tidyverse using install.packages().
install.packages("tidyverse")
# I was asked "Do you want to install from sources the packages which need compilation? (Yes/no/cancel)" and I typed "yes" here
#2 Load the tidyverse using library()
library(tidyverse)
# Exercise 10
lengths <- 1:10
radius <- 0.5
answer <- sum(pi * radius ^ 2 * lengths)
#2 two bugs are fixed by changing "< -" to "<-", "R" to "r"
answer
#3 print the answer to the console
